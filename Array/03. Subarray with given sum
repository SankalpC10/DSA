03. Subarray with given sum

Given an unsorted array A of size N that contains only non-negative integers, find a continuous sub-array which adds to a given number S.

 

Example 1:

Input:
N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4
Explanation: The sum of elements 
from 2nd position to 4th position 
is 12.
 

Example 2:

Input:
N = 10, S = 15
A[] = {1,2,3,4,5,6,7,8,9,10}
Output: 1 5
Explanation: The sum of elements 
from 1st position to 5th position
is 15.
  

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

class Solution
{
    public:
    //Function to find a continuous sub-array which adds up to a given number.
    vector<int> subarraySum(int arr[], int n, int s)
    {
        int l = 0;
        int r = 0;
        int sum = 0;
        vector<int> res;
        
        while (r<=n) {
            if (sum == s) {
                res.push_back(l+1);
                res.push_back(r);
                return res;
            }
            if (l==r || sum < s) {
                r++;
                sum += arr[r-1];
            }
            else {
                l++;
                sum -= arr[l-1];
            }
        }
        
        res.push_back(-1);
        return res;
    }
};
