1. Removing Consecutive Duplicates
    Push elements in stack only if it isn't equal to stack top.
    Code:
      string removeConsecutiveDuplicates(string s)
      {
          stack<char>st;
          st.push(s[0]);
          cout<<s[0];
          for(int i=1;i<s.length();i++)
          {
              if(s[i]!=st.top())
              {
                  st.push(s[i]);
                  cout<<s[i];
              }
          }
      }
2.Removing Consecutive Duplicates-2
  This is recurrent version of above problem. If two same appears, then remove them and check consecutives from remaining string.
  First create an empty string as return type is string. Create a stack. A better approach is to traverse from last element.
  The logic is-
    1.If stack is empty, then push the current element.
    2.If current element is equal to stack top, it means they are consecutive, so pop the top.
    3.If the current element is different from stack top, then push it to top.
  Now, using while loop, keep joining the current string the stack tops and pop them to geet to next element.
  
  Code:
    string removePair(string str)
      {
          stack<char>st;
          int n=str.length();
          string s="";
          for(int i=n-1;i>=0;i--)
          {
              if(st.empty())
              st.push(str[i]);
          else if(st.top()==str[i])
              st.pop();
          else st.push(str[i]);
          }
          while(st.empty()==false)
          {
              s+=st.top();
              st.pop();
          }
          return s;
      }
3.Implement two stacks in an array
    To implement two stacks in an array, one stack must grows from left to right while other one grows from right to left. Initialize top as -1 and sizee as nth position.
    1. Push to stack1:-
       First increment top1 by one and assign value x to that position.
    2.Push to stack2:-
        Decrement top2 by one and assign value x to the position.
    3.To remove top element from stack1:-
        If top doesn't exist, then return -1. Otherwise, return current top1 and decrement current position by 1.
    4.To remove top element from stack2:-
       If top doesn't exist, then return -1. Otherwise, return current top2 and increment current position by 1.
    Code:
        //Function to push an integer into the stack1.
        void twoStacks :: push1(int x)
        {
            arr[++top1]=x;
        }

        //Function to push an integer into the stack2.
        void twoStacks ::push2(int x)
        {
            arr[--top2]=x;
        }

        //Function to remove an element from top of the stack1.
        int twoStacks ::pop1()
        {
            return top1 == -1 ? -1:arr[top1--];
        }

        //Function to remove an element from top of the stack2.
        int twoStacks :: pop2()
        {
            return top2 ==size ? -1:arr[top2++];
        }
    
  
