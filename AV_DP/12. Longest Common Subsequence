12. Longest Common Subsequence

Approach- Input- ABCDGH & AEDFHR x=6 y=6, where x,y are size of input strings
          LCS-   ADH
          Output-3
   1.Create table [x+1][y+1] 
   2.Initialize- if i==0 or j==0, LCS =0
   3. if last char of both string is same, add 1 to LCS
            if(s1[i-1]==s2[j-1])
                {
                    t[i][j]=1+t[i-1][j-1];
                }
   4. else- LCS is max LCS obtained by excluding last char of first substring and sexcluding last char of second
            t[i][j]=max(t[i-1][j],t[i][j-1]);
   
Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.
Expected Time Complexity : O(|str1|*|str2|)
Expected Auxiliary Space: O(|str1|*|str2|)

Example 1:

Input:
A = 6, B = 6
str1 = ABCDGH
str2 = AEDFHR
Output: 3
Explanation: LCS for input Sequences
“ABCDGH” and “AEDFHR” is “ADH” of
length 3.
Example 2:

Input:
A = 3, B = 2
str1 = ABC
str2 = AC
Output: 2
Explanation: LCS of "ABC" and "AC" is
"AC" of length 2.


int lcs(int x, int y, string s1, string s2)
    {
        int t[x+1][y+1];
        for(int i=0;i<x+1;i++)
        {
            for(int j=0;j<y+1;j++)
            {
                if(i==0 || j==0)
                {
                    t[i][j]=0;
                }
            }
        }
        for(int i=1;i<x+1;i++)
        {
            for(int j=1;j<y+1;j++)
            {
                if(s1[i-1]==s2[j-1])
                {
                    t[i][j]=1+t[i-1][j-1];
                }
                else
                {
                    t[i][j]=max(t[i-1][j],t[i][j-1]);
                }
            }
        }
        return t[x][y];
    }
