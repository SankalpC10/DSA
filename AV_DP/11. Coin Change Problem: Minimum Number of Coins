11.Number of Coins

Approach:- Its unbounded knapsack min count.
1.Initialization:-
  if i==0 => INT_MAX-1
  if j==0 => 0
  if i==1 => Get minimum when only arr[0] is present , so j/arr[0] else INT_MAX-1
     
2.  if(coins[i-1]<=j)
    t[i][j]=min(1+t[i][j-coins[i-1]],t[i-1][j]);
    else t[i][j]=t[i-1][j]

3. return t[M][V]==INT_MAX-1? -1: t[M][V];

Why INT_MAX-1 => As we are doing 1+t[i][j-coins[i-1]].... , basically we are adding 1. Suppose a number is INT_MAX
it will get stored as negative number. Hence if we do +1 to INT_MAX-1, we are safe

Given a value V and array coins[] of size M, the task is to make the change for V cents,
given that you have an infinite supply of each of coins{coins1, coins2, ..., coinsm} valued coins. 
Find the minimum number of coins to make the change. If not possible to make change then return -1.

Example 1:

Input: V = 30, M = 3, coins[] = {25, 10, 5}
Output: 2
Explanation: Use one 25 cent coin
and one 5 cent coin
Example 2:
Input: V = 11, M = 4,coins[] = {9, 6, 5, 1} 
Output: 2 
Explanation: Use one 6 cent coin
and one 5 cent coin

Expected Time Complexity: O(V*M)
Expected Auxiliary Space: O(V)

class Solution{

	public:
	int minCoins(int coins[], int M, int V) 
	{ 
	    int t[M+1][V+1];
	    for(int i=0;i<M+1;i++)
	    {
	        for(int j=0;j<V+1;j++)
	        {
	            if(i==0)
	            {
	                t[i][j]=INT_MAX-1;
	            }
	            if(j==0)
	            {
	                t[i][j]=0;
	            }
	        }
	    }
	    for(int j=1;j<V+1;j++)
	    {
	        int i=1;
	        if(j%coins[0]==0)
	        {
	            t[i][j]=j/coins[0];
	        }
	        else
	        {
	            t[i][j]=INT_MAX-1;
	        }
	    }
	    for(int i=1;i<M+1;i++)
	    {
	        for(int j=1;j<V+1;j++)
	        {
	            if(coins[i-1]<=j)
	            {
	                t[i][j]=min(1+t[i][j-coins[i-1]],t[i-1][j]);
	            }
	            else
	            {
	                t[i][j]=t[i-1][j];
	            }
	        }
	    }
	    return t[M][V]==INT_MAX-1? -1: t[M][V];
	} 
	  
};
