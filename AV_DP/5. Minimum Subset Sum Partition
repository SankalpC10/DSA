class Solution{

  public:
    int minSumPartition(int n,int arr[],int sum)
    {
        bool t[n+1][sum+1];
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                if(i==0)
                {
                    t[i][j]=0;
                }
                if(j==0)
                {
                    t[i][j]=1;
                }
            }
        }
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                if(arr[i-1]<=sum)
                {
                    t[i][j]=(t[i-1][j-arr[i-1]] || t[i-1][j]);
                }
                else
                {
                    t[i][j]=t[i-1][j];
                }
            }
        }
        vector<int>v;
        for(int i=0;i<=sum/2;i++)
        {
            if(t[n][i]==1)
            {
                v.push_back(i);
            }
        }
        int ans=INT_MAX;
        for(int i=0;i<v.size();i++)
        {
            ans=min(ans,sum-2*v[i]);
        }
        return ans;
    }
	int minDifference(int arr[], int n)  { 
	     int sum=0;
	     for(int i=0;i<n;i++)
	     {
	         sum+=arr[i];
	     }
	     return minSumPartition(n,arr,sum);
	} 
};
