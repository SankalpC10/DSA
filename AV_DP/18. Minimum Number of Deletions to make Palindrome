18. Minimum Number of Deletions to make String Palindrome

Given a string of S as input. Your task is to write a program to remove or delete the minimum number of characters from the string so that the resultant string
is a palindrome.
Note: The order of characters in the string should be maintained.

Example 1:

Input: S = "aebcbda"
Output: 2
Explanation: Remove characters 'e' 
and 'd'.
Example 2:

Input: S = "geeksforgeeks"
Output: 8
Explanation: One of the possible result
string can be "eefee", so answer is 
13 - 5 = 8.

Expected Time Complexity: O(|S|2)
Expected Auxiliary Space: O(|S|2)

class Solution{
  public:
    int minimumNumberOfDeletions(string S) { 
        string R=S;
        reverse(R.begin(),R.end());
        int l=S.size();
        int t[l+1][l+1];
        for(int i=0;i<l+1;i++)
        {
            for(int j=0;j<l+1;j++)
            {
                if(i==0 || j==0)
                {
                    t[i][j]=0;       
                }
            }
        }
        for(int i=1;i<l+1;i++)
        {
            for(int j=1;j<l+1;j++)
            {
                if(S[i-1]==R[j-1])
                {
                    t[i][j]=1+t[i-1][j-1];
                }
                else
                {
                    t[i][j]=max(t[i-1][j],t[i][j-1]);
                }
            }
        }
        return l-t[l][l];
    } 
};
